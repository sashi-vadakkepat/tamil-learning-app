================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2025-02-11T06:11:09.698Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
src/
  App.jsx
  index.css
  main.jsx
  TestModule.jsx
index.html
package.json
postcss.config.js
tailwind.config.js
vite.config.js

================================================================
Repository Files
================================================================

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tamil Learning App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "tamil-learning-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "lucide-react": "^0.263.1"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.0",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.24",
    "tailwindcss": "^3.3.2",
    "vite": "^4.3.9"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: src\App.jsx
================
import React, { useState } from 'react';
import { Book, Monitor, Trophy, Languages, Grid, ArrowRightLeft, MessageCircle } from 'lucide-react';
import TestModule from './TestModule';

const lessons = [
  {
    id: 1,
    title: 'நூலகம் (Library)',
    icon: <Book className="w-6 h-6" />,
    modules: [
      {
        title: 'Translations (மொழிபெயர்த்தல்)',
        type: 'translations',
        content: [
          { english: 'house', tamil: 'வீடு' },
          { english: 'book', tamil: 'புத்தகம், நூல்' },
          { english: 'library', tamil: 'நூலகம்' },
          { english: 'reading', tamil: 'படித்தல்' }
        ]
      },
      {
        title: 'Word Meanings (பொருள் எழுதுக)',
        type: 'meanings',
        content: [
          { word: 'நூல்', meaning: 'புத்தகம்' },
          { word: 'வழி', meaning: 'பாதை' },
          { word: 'நாளிதழ்', meaning: 'செய்தித்தாள்' }
        ]
      },
      {
        title: 'Word Separation (பிரித்து எழுதுக)',
        type: 'separation',
        content: [
          { combined: 'தேனருவி', parts: ['தேன்', 'அருவி'] },
          { combined: 'புத்துணர்ச்சி', parts: ['புதுமை', 'உணர்ச்சி'] }
        ]
      },
      {
        title: 'Word Joining (சேர்த்து எழுதுக)',
        type: 'joining',
        content: [
          { parts: ['பள்ளி', 'கூடம்'], combined: 'பள்ளிக்கூடம்' },
          { parts: ['நூல்', 'அகம்'], combined: 'நூலகம்' }
        ]
      },
      {
        title: 'Opposites (எதிர்ச்சொல்)',
        type: 'opposites',
        content: [
          { word: 'அத்தை', opposite: 'மாமா' },
          { word: 'போகும்', opposite: 'போகாது' },
          { word: 'சரி', opposite: 'தவறு' }
        ]
      },
      {
        title: 'Questions and Answers (வினாக்களுக்கு விடையளி)',
        type: 'qa',
        content: [
          {
            question: 'நூலகத்தின் வேறு பெயர்கள் யாவை?',
            answer: ['நூல் நிலையம்', 'புத்தகச்சாலை']
          },
          {
            question: 'நூலக தினமாகக் கொண்டாடப்படும் நாள் எது?',
            answer: ['ஆகஸ்ட் 12 ம் தேதி நூலக தினமாகக் கொண்டாடப்படுகிறது.']
          }
        ]
      }
    ]
  },
  {
    id: 2,
    title: 'உள்ளங்கையில் ஓர் உலகம் (World in Palm)',
    icon: <Monitor className="w-6 h-6" />,
    modules: [
      {
        title: 'Technology Terms (தொழில்நுட்ப சொற்கள்)',
        type: 'translations',
        content: [
          { english: 'Mail', tamil: 'மின்னஞ்சல்' },
          { english: 'Facebook', tamil: 'முகநூல்' },
          { english: 'WhatsApp', tamil: 'புலனம்' },
          { english: 'Internet', tamil: 'இணையம்' },
          { english: 'Youtube', tamil: 'வலையொளி' }
        ]
      },
      {
        title: 'Word Meanings (பொருள் எழுதுக)',
        type: 'meanings',
        content: [
          { word: 'தரணி', meaning: 'உலகம்' },
          { word: 'ஏற்றம்', meaning: 'உயர்வு' },
          { word: 'துணைபுரிவேன்', meaning: 'உதவுவேன்' }
        ]
      }
    ]
  },
  {
    id: 3,
    title: 'துணிந்தவர் வெற்றி கொள்வர் (Brave Will Win)',
    icon: <Trophy className="w-6 h-6" />,
    modules: [
      {
        title: 'Translations (மொழிபெயர்த்தல்)',
        type: 'translations',
        content: [
          { english: 'Classroom', tamil: 'வகுப்பறை' },
          { english: 'competition', tamil: 'போட்டி' },
          { english: 'win', tamil: 'வெற்றி' },
          { english: 'try', tamil: 'முயற்சி' }
        ]
      },
      {
        title: 'Word Meanings (பொருள் எழுதுக)',
        type: 'meanings',
        content: [
          { word: 'ஆக்கம்', meaning: 'முயற்சி' },
          { word: 'வியப்பு', meaning: 'ஆச்சரியம்' },
          { word: 'சுலபமாக', meaning: 'எளிதாக' }
        ]
      }
    ]
  }
];

const ContentCard = ({ item, type }) => {
  const [isFlipped, setIsFlipped] = useState(false);

  const handleTouchStart = (e) => {
    e.preventDefault();
  };

  const renderContent = () => {
    switch (type) {
      case 'translations':
        return (
          <>
            <div className="text-base sm:text-lg md:text-xl mb-2 sm:mb-3 md:mb-4">
              {isFlipped ? item.tamil : item.english}
            </div>
            <div className="text-xs sm:text-sm text-gray-500 mb-2">
              Click to see {isFlipped ? 'English' : 'Tamil'}
            </div>
          </>
        );
      case 'meanings':
        return (
          <>
            <div className="text-base sm:text-lg md:text-xl mb-2 sm:mb-3 md:mb-4">
              {isFlipped ? item.meaning : item.word}
            </div>
            <div className="text-xs sm:text-sm text-gray-500 mb-2">
              Click to see {isFlipped ? 'word' : 'meaning'}
            </div>
          </>
        );
      case 'separation':
        return (
          <>
            <div className="text-base sm:text-lg md:text-xl mb-2">{item.combined}</div>
            <div className="text-lg text-blue-700 font-medium">
              {isFlipped ? item.parts.join(' + ') : 'Click to see parts'}
            </div>
          </>
        );
      case 'joining':
        return (
          <>
            <div className="text-base sm:text-lg md:text-xl mb-2">{item.parts.join(' + ')}</div>
            <div className="text-lg text-blue-700 font-medium">
              {isFlipped ? item.combined : 'Click to see combined word'}
            </div>
          </>
        );
      case 'opposites':
        return (
          <>
            <div className="text-base sm:text-lg md:text-xl mb-2">{item.word}</div>
            <div className="text-lg text-blue-700 font-medium">
              {isFlipped ? item.opposite : 'Click to see opposite'}
            </div>
          </>
        );
      case 'qa':
        return (
          <>
            <div className="text-base sm:text-lg md:text-xl mb-4">{item.question}</div>
            {isFlipped && (
              <div className="text-md text-blue-700 font-medium">
                {item.answer.map((ans, idx) => (
                  <p key={idx} className="mb-2">{ans}</p>
                ))}
              </div>
            )}
            <div className="text-xs sm:text-sm text-gray-500">
              {!isFlipped && 'Click to see answer'}
            </div>
          </>
        );
      default:
        return null;
    }
  };

  return (
    <div 
      className={`rounded-lg border p-4 cursor-pointer transform transition-all duration-300 hover:scale-105 shadow-sm hover:shadow-md ${
        isFlipped ? 'bg-blue-50 border-blue-200' : 'bg-white border-blue-100'
      }`}
      onClick={() => setIsFlipped(!isFlipped)}
      onTouchStart={handleTouchStart}
      role="button"
      tabIndex={0}
    >
      <div className="p-2 sm:p-3 md:p-6 text-center min-h-[120px] flex flex-col justify-between">
        {renderContent()}
      </div>
    </div>
  );
};

const Module = ({ module }) => {
  const getIcon = (type) => {
    switch (type) {
      case 'translations': return <Languages className="w-5 h-5" />;
      case 'separation': return <Grid className="w-5 h-5" />;
      case 'qa': return <MessageCircle className="w-5 h-5" />;
      default: return <ArrowRightLeft className="w-5 h-5" />;
    }
  };

  return (
    <div className="mb-4 sm:mb-6 rounded-lg border border-blue-100 shadow-sm hover:shadow-md transition-shadow duration-300 bg-white">
      <div className="border-b border-blue-100 p-4">
        <div className="flex items-center gap-2">
          {getIcon(module.type)}
          <h3 className="text-lg text-blue-900 font-semibold">{module.title}</h3>
        </div>
      </div>
      <div className="grid grid-cols-1 gap-3 sm:grid-cols-2 sm:gap-4 p-4">
        {module.content.map((item, index) => (
          <div key={index} className="touch-manipulation">
            <ContentCard item={item} type={module.type} />
          </div>
        ))}
      </div>
    </div>
  );
};

const TamilLearningApp = () => {
  const [selectedLesson, setSelectedLesson] = useState(null);
  const [mode, setMode] = useState('learn'); // 'learn' or 'test'

  return (
    <div className="max-w-6xl mx-auto px-2 py-1 sm:p-4 bg-gradient-to-b from-blue-50 to-white min-h-screen">
      <div className="flex flex-col sm:flex-row justify-between items-center mb-6">
        <h1 className="text-xl sm:text-2xl md:text-3xl font-bold text-blue-900">
          {selectedLesson ? 'Tamil Learning App' : 'Choose Your Mode'}
        </h1>
        {!selectedLesson && (
          <div className="flex gap-2 mt-4 sm:mt-0">
            <button
              onClick={() => setMode('learn')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                mode === 'learn'
                  ? 'bg-blue-600 text-white'
                  : 'bg-white text-blue-600 border border-blue-600'
              }`}
            >
              Learn
            </button>
            <button
              onClick={() => setMode('test')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                mode === 'test'
                  ? 'bg-blue-600 text-white'
                  : 'bg-white text-blue-600 border border-blue-600'
              }`}
            >
              Test
            </button>
          </div>
        )}
      </div>
      
      {!selectedLesson ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
          {lessons.map((lesson) => (
            <div 
              key={lesson.id}
              className="rounded-lg border cursor-pointer hover:shadow-lg transition-all duration-300 hover:-translate-y-1 border-blue-100 hover:border-blue-200 bg-white"
              onClick={() => setSelectedLesson(lesson)}
            >
              <div className="border-b border-blue-100 p-4">
                <div className="flex items-center gap-2">
                  {lesson.icon}
                  <h2 className="text-lg font-semibold">{lesson.title}</h2>
                </div>
              </div>
              <div className="p-4">
                <p className="text-gray-600">
                  {mode === 'learn' 
                    ? `${lesson.modules.length} learning modules`
                    : `Practice test available`
                  }
                </p>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div>
          <button 
            className="mb-6 px-4 py-2 border border-gray-200 rounded-lg hover:bg-blue-50 transition-colors duration-300 flex items-center gap-2"
            onClick={() => setSelectedLesson(null)}
          >
            ← Back to Lessons
          </button>
          
          <h2 className="text-2xl font-semibold mb-6">{selectedLesson.title}</h2>
          
          {mode === 'learn' ? (
            selectedLesson.modules.map((module, index) => (
              <Module key={index} module={module} />
            ))
          ) : (
            <TestModule lesson={selectedLesson} />
          )}
        </div>
      )}
    </div>
  );
};

export default TamilLearningApp;

================
File: src\index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src\main.jsx
================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

================
File: src\TestModule.jsx
================
import React, { useState, useEffect } from 'react';
import { Check, X, RefreshCw, Award } from 'lucide-react';

const TestModule = ({ lesson }) => {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [showResults, setShowResults] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [isAnswered, setIsAnswered] = useState(false);
  const [questions, setQuestions] = useState([]);

  // Helper function to shuffle array
  const shuffleArray = (array) => {
    if (!Array.isArray(array)) return [];
    let currentIndex = array.length;
    while (currentIndex !== 0) {
      const randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex--;
      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
    }
    return array;
  };

  // Helper function to get random options
  const getRandomOptions = (content, key, exclude, count) => {
    if (!Array.isArray(content)) return [];
    const options = content
      .map(item => item[key])
      .filter(item => item !== exclude && item);
    return shuffleArray(options).slice(0, Math.min(count, options.length));
  };

  // Helper function to generate fake answers for QA
  const generateFakeAnswers = (count) => {
    const fakeAnswers = [
      'இது சரியான விடை அல்ல',
      'மேலும் படிக்கவும்',
      'முயற்சி செய்யவும்',
      'வேறு பதில் தேர்வு செய்யவும்'
    ];
    return shuffleArray(fakeAnswers).slice(0, count);
  };

  // Generate questions based on lesson content
  const generateQuestions = (lessonData) => {
    if (!lessonData || !lessonData.modules) {
      console.warn('Invalid lesson data provided to TestModule');
      return [];
    }

    let generatedQuestions = [];
    
    lessonData.modules.forEach(module => {
      if (!module || !module.content || !Array.isArray(module.content)) {
        return;
      }

      switch (module.type) {
        case 'translations':
          module.content.forEach(item => {
            if (item.english && item.tamil) {
              const options = shuffleArray([
                item.tamil,
                ...getRandomOptions(module.content, 'tamil', item.tamil, 3)
              ]);
              if (options.length >= 2) {  // Only add if we have enough options
                generatedQuestions.push({
                  type: 'translation',
                  question: `What is the Tamil word for "${item.english}"?`,
                  correctAnswer: item.tamil,
                  options
                });
              }
            }
          });
          break;
          
        case 'meanings':
          module.content.forEach(item => {
            if (item.word && item.meaning) {
              const options = shuffleArray([
                item.meaning,
                ...getRandomOptions(module.content, 'meaning', item.meaning, 3)
              ]);
              if (options.length >= 2) {
                generatedQuestions.push({
                  type: 'meaning',
                  question: `What is the meaning of "${item.word}"?`,
                  correctAnswer: item.meaning,
                  options
                });
              }
            }
          });
          break;
          
        case 'opposites':
          module.content.forEach(item => {
            if (item.word && item.opposite) {
              const options = shuffleArray([
                item.opposite,
                ...getRandomOptions(module.content, 'opposite', item.opposite, 3)
              ]);
              if (options.length >= 2) {
                generatedQuestions.push({
                  type: 'opposite',
                  question: `What is the opposite of "${item.word}"?`,
                  correctAnswer: item.opposite,
                  options
                });
              }
            }
          });
          break;
          
        case 'qa':
          module.content.forEach(item => {
            if (item.question && item.answer && item.answer[0]) {
              const options = shuffleArray([
                item.answer[0],
                ...generateFakeAnswers(3)
              ]);
              if (options.length >= 2) {
                generatedQuestions.push({
                  type: 'comprehension',
                  question: item.question,
                  correctAnswer: item.answer[0],
                  options
                });
              }
            }
          });
          break;
      }
    });
    
    return shuffleArray(generatedQuestions);
  };

  // Generate questions when lesson changes
  useEffect(() => {
    const newQuestions = generateQuestions(lesson);
    setQuestions(newQuestions);
    // Reset state when lesson changes
    setCurrentQuestionIndex(0);
    setScore(0);
    setShowResults(false);
    setSelectedAnswer(null);
    setIsAnswered(false);
  }, [lesson]);

  const handleAnswer = (answer) => {
    if (isAnswered) return;
    
    setSelectedAnswer(answer);
    setIsAnswered(true);
    
    if (answer === questions[currentQuestionIndex].correctAnswer) {
      setScore(score + 1);
    }
  };

  const handleNext = () => {
    if (currentQuestionIndex === questions.length - 1) {
      setShowResults(true);
    } else {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedAnswer(null);
      setIsAnswered(false);
    }
  };

  const handleRetry = () => {
    setCurrentQuestionIndex(0);
    setScore(0);
    setShowResults(false);
    setSelectedAnswer(null);
    setIsAnswered(false);
  };

  // Show message if no questions available
  if (!questions || questions.length === 0) {
    return (
      <div className="p-6 bg-white rounded-lg shadow-md">
        <p className="text-center text-gray-600">
          No test questions available for this lesson.
        </p>
      </div>
    );
  }

  if (showResults) {
    return (
      <div className="p-6 bg-white rounded-lg shadow-md">
        <div className="text-center">
          <Award className="w-16 h-16 text-yellow-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold mb-4">Test Complete!</h2>
          <p className="text-lg mb-4">
            Your score: {score} out of {questions.length}
            ({Math.round((score / questions.length) * 100)}%)
          </p>
          <button
            onClick={handleRetry}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 mx-auto"
          >
            <RefreshCw className="w-4 h-4" />
            Try Again
          </button>
        </div>
      </div>
    );
  }

  const currentQuestion = questions[currentQuestionIndex];

  return (
    <div className="p-6 bg-white rounded-lg shadow-md">
      <div className="mb-6">
        <div className="flex justify-between items-center mb-4">
          <span className="text-sm text-gray-500">
            Question {currentQuestionIndex + 1} of {questions.length}
          </span>
          <span className="text-sm text-gray-500">
            Score: {score}
          </span>
        </div>
        <h3 className="text-lg font-medium mb-4">{currentQuestion.question}</h3>
        <div className="space-y-3">
          {currentQuestion.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswer(option)}
              disabled={isAnswered}
              className={`w-full p-3 text-left rounded-lg border transition-all ${
                isAnswered
                  ? option === currentQuestion.correctAnswer
                    ? 'bg-green-100 border-green-500'
                    : option === selectedAnswer
                    ? 'bg-red-100 border-red-500'
                    : 'bg-gray-50 border-gray-200'
                  : 'hover:bg-blue-50 border-gray-200'
              }`}
            >
              <div className="flex items-center justify-between">
                <span>{option}</span>
                {isAnswered && option === currentQuestion.correctAnswer && (
                  <Check className="w-5 h-5 text-green-500" />
                )}
                {isAnswered && option === selectedAnswer && option !== currentQuestion.correctAnswer && (
                  <X className="w-5 h-5 text-red-500" />
                )}
              </div>
            </button>
          ))}
        </div>
      </div>
      {isAnswered && (
        <button
          onClick={handleNext}
          className="w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          {currentQuestionIndex === questions.length - 1 ? 'Show Results' : 'Next Question'}
        </button>
      )}
    </div>
  );
};

export default TestModule;

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  base: '/tamil-learning-app/'
})
